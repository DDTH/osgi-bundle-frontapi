/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.ddth.frontapi.internal.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TApi {

  public interface Iface {

    public TApiResult callApi(String authKey, String moduleName, String apiName, String jsonInput) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void callApi(String authKey, String moduleName, String apiName, String jsonInput, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TApiResult callApi(String authKey, String moduleName, String apiName, String jsonInput) throws org.apache.thrift.TException
    {
      send_callApi(authKey, moduleName, apiName, jsonInput);
      return recv_callApi();
    }

    public void send_callApi(String authKey, String moduleName, String apiName, String jsonInput) throws org.apache.thrift.TException
    {
      callApi_args args = new callApi_args();
      args.setAuthKey(authKey);
      args.setModuleName(moduleName);
      args.setApiName(apiName);
      args.setJsonInput(jsonInput);
      sendBase("callApi", args);
    }

    public TApiResult recv_callApi() throws org.apache.thrift.TException
    {
      callApi_result result = new callApi_result();
      receiveBase(result, "callApi");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "callApi failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void callApi(String authKey, String moduleName, String apiName, String jsonInput, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      callApi_call method_call = new callApi_call(authKey, moduleName, apiName, jsonInput, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class callApi_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authKey;
      private String moduleName;
      private String apiName;
      private String jsonInput;
      public callApi_call(String authKey, String moduleName, String apiName, String jsonInput, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authKey = authKey;
        this.moduleName = moduleName;
        this.apiName = apiName;
        this.jsonInput = jsonInput;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("callApi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        callApi_args args = new callApi_args();
        args.setAuthKey(authKey);
        args.setModuleName(moduleName);
        args.setApiName(apiName);
        args.setJsonInput(jsonInput);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TApiResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_callApi();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("callApi", new callApi());
      return processMap;
    }

    public static class callApi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, callApi_args> {
      public callApi() {
        super("callApi");
      }

      public callApi_args getEmptyArgsInstance() {
        return new callApi_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public callApi_result getResult(I iface, callApi_args args) throws org.apache.thrift.TException {
        callApi_result result = new callApi_result();
        result.success = iface.callApi(args.authKey, args.moduleName, args.apiName, args.jsonInput);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("callApi", new callApi());
      return processMap;
    }

    public static class callApi<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, callApi_args, TApiResult> {
      public callApi() {
        super("callApi");
      }

      public callApi_args getEmptyArgsInstance() {
        return new callApi_args();
      }

      public AsyncMethodCallback<TApiResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TApiResult>() { 
          public void onComplete(TApiResult o) {
            callApi_result result = new callApi_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            callApi_result result = new callApi_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, callApi_args args, org.apache.thrift.async.AsyncMethodCallback<TApiResult> resultHandler) throws TException {
        iface.callApi(args.authKey, args.moduleName, args.apiName, args.jsonInput,resultHandler);
      }
    }

  }

  public static class callApi_args implements org.apache.thrift.TBase<callApi_args, callApi_args._Fields>, java.io.Serializable, Cloneable, Comparable<callApi_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("callApi_args");

    private static final org.apache.thrift.protocol.TField AUTH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("authKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MODULE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField API_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("apiName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField JSON_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonInput", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new callApi_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new callApi_argsTupleSchemeFactory());
    }

    public String authKey; // required
    public String moduleName; // required
    public String apiName; // required
    public String jsonInput; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_KEY((short)1, "authKey"),
      MODULE_NAME((short)2, "moduleName"),
      API_NAME((short)3, "apiName"),
      JSON_INPUT((short)4, "jsonInput");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_KEY
            return AUTH_KEY;
          case 2: // MODULE_NAME
            return MODULE_NAME;
          case 3: // API_NAME
            return API_NAME;
          case 4: // JSON_INPUT
            return JSON_INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_KEY, new org.apache.thrift.meta_data.FieldMetaData("authKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODULE_NAME, new org.apache.thrift.meta_data.FieldMetaData("moduleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.API_NAME, new org.apache.thrift.meta_data.FieldMetaData("apiName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_INPUT, new org.apache.thrift.meta_data.FieldMetaData("jsonInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(callApi_args.class, metaDataMap);
    }

    public callApi_args() {
    }

    public callApi_args(
      String authKey,
      String moduleName,
      String apiName,
      String jsonInput)
    {
      this();
      this.authKey = authKey;
      this.moduleName = moduleName;
      this.apiName = apiName;
      this.jsonInput = jsonInput;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public callApi_args(callApi_args other) {
      if (other.isSetAuthKey()) {
        this.authKey = other.authKey;
      }
      if (other.isSetModuleName()) {
        this.moduleName = other.moduleName;
      }
      if (other.isSetApiName()) {
        this.apiName = other.apiName;
      }
      if (other.isSetJsonInput()) {
        this.jsonInput = other.jsonInput;
      }
    }

    public callApi_args deepCopy() {
      return new callApi_args(this);
    }

    @Override
    public void clear() {
      this.authKey = null;
      this.moduleName = null;
      this.apiName = null;
      this.jsonInput = null;
    }

    public String getAuthKey() {
      return this.authKey;
    }

    public callApi_args setAuthKey(String authKey) {
      this.authKey = authKey;
      return this;
    }

    public void unsetAuthKey() {
      this.authKey = null;
    }

    /** Returns true if field authKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthKey() {
      return this.authKey != null;
    }

    public void setAuthKeyIsSet(boolean value) {
      if (!value) {
        this.authKey = null;
      }
    }

    public String getModuleName() {
      return this.moduleName;
    }

    public callApi_args setModuleName(String moduleName) {
      this.moduleName = moduleName;
      return this;
    }

    public void unsetModuleName() {
      this.moduleName = null;
    }

    /** Returns true if field moduleName is set (has been assigned a value) and false otherwise */
    public boolean isSetModuleName() {
      return this.moduleName != null;
    }

    public void setModuleNameIsSet(boolean value) {
      if (!value) {
        this.moduleName = null;
      }
    }

    public String getApiName() {
      return this.apiName;
    }

    public callApi_args setApiName(String apiName) {
      this.apiName = apiName;
      return this;
    }

    public void unsetApiName() {
      this.apiName = null;
    }

    /** Returns true if field apiName is set (has been assigned a value) and false otherwise */
    public boolean isSetApiName() {
      return this.apiName != null;
    }

    public void setApiNameIsSet(boolean value) {
      if (!value) {
        this.apiName = null;
      }
    }

    public String getJsonInput() {
      return this.jsonInput;
    }

    public callApi_args setJsonInput(String jsonInput) {
      this.jsonInput = jsonInput;
      return this;
    }

    public void unsetJsonInput() {
      this.jsonInput = null;
    }

    /** Returns true if field jsonInput is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonInput() {
      return this.jsonInput != null;
    }

    public void setJsonInputIsSet(boolean value) {
      if (!value) {
        this.jsonInput = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_KEY:
        if (value == null) {
          unsetAuthKey();
        } else {
          setAuthKey((String)value);
        }
        break;

      case MODULE_NAME:
        if (value == null) {
          unsetModuleName();
        } else {
          setModuleName((String)value);
        }
        break;

      case API_NAME:
        if (value == null) {
          unsetApiName();
        } else {
          setApiName((String)value);
        }
        break;

      case JSON_INPUT:
        if (value == null) {
          unsetJsonInput();
        } else {
          setJsonInput((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_KEY:
        return getAuthKey();

      case MODULE_NAME:
        return getModuleName();

      case API_NAME:
        return getApiName();

      case JSON_INPUT:
        return getJsonInput();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_KEY:
        return isSetAuthKey();
      case MODULE_NAME:
        return isSetModuleName();
      case API_NAME:
        return isSetApiName();
      case JSON_INPUT:
        return isSetJsonInput();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof callApi_args)
        return this.equals((callApi_args)that);
      return false;
    }

    public boolean equals(callApi_args that) {
      if (that == null)
        return false;

      boolean this_present_authKey = true && this.isSetAuthKey();
      boolean that_present_authKey = true && that.isSetAuthKey();
      if (this_present_authKey || that_present_authKey) {
        if (!(this_present_authKey && that_present_authKey))
          return false;
        if (!this.authKey.equals(that.authKey))
          return false;
      }

      boolean this_present_moduleName = true && this.isSetModuleName();
      boolean that_present_moduleName = true && that.isSetModuleName();
      if (this_present_moduleName || that_present_moduleName) {
        if (!(this_present_moduleName && that_present_moduleName))
          return false;
        if (!this.moduleName.equals(that.moduleName))
          return false;
      }

      boolean this_present_apiName = true && this.isSetApiName();
      boolean that_present_apiName = true && that.isSetApiName();
      if (this_present_apiName || that_present_apiName) {
        if (!(this_present_apiName && that_present_apiName))
          return false;
        if (!this.apiName.equals(that.apiName))
          return false;
      }

      boolean this_present_jsonInput = true && this.isSetJsonInput();
      boolean that_present_jsonInput = true && that.isSetJsonInput();
      if (this_present_jsonInput || that_present_jsonInput) {
        if (!(this_present_jsonInput && that_present_jsonInput))
          return false;
        if (!this.jsonInput.equals(that.jsonInput))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(callApi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthKey()).compareTo(other.isSetAuthKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authKey, other.authKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModuleName()).compareTo(other.isSetModuleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModuleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleName, other.moduleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApiName()).compareTo(other.isSetApiName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiName, other.apiName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonInput()).compareTo(other.isSetJsonInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonInput, other.jsonInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("callApi_args(");
      boolean first = true;

      sb.append("authKey:");
      if (this.authKey == null) {
        sb.append("null");
      } else {
        sb.append(this.authKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("moduleName:");
      if (this.moduleName == null) {
        sb.append("null");
      } else {
        sb.append(this.moduleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiName:");
      if (this.apiName == null) {
        sb.append("null");
      } else {
        sb.append(this.apiName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonInput:");
      if (this.jsonInput == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonInput);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class callApi_argsStandardSchemeFactory implements SchemeFactory {
      public callApi_argsStandardScheme getScheme() {
        return new callApi_argsStandardScheme();
      }
    }

    private static class callApi_argsStandardScheme extends StandardScheme<callApi_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, callApi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authKey = iprot.readString();
                struct.setAuthKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODULE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.moduleName = iprot.readString();
                struct.setModuleNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // API_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiName = iprot.readString();
                struct.setApiNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // JSON_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonInput = iprot.readString();
                struct.setJsonInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, callApi_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authKey != null) {
          oprot.writeFieldBegin(AUTH_KEY_FIELD_DESC);
          oprot.writeString(struct.authKey);
          oprot.writeFieldEnd();
        }
        if (struct.moduleName != null) {
          oprot.writeFieldBegin(MODULE_NAME_FIELD_DESC);
          oprot.writeString(struct.moduleName);
          oprot.writeFieldEnd();
        }
        if (struct.apiName != null) {
          oprot.writeFieldBegin(API_NAME_FIELD_DESC);
          oprot.writeString(struct.apiName);
          oprot.writeFieldEnd();
        }
        if (struct.jsonInput != null) {
          oprot.writeFieldBegin(JSON_INPUT_FIELD_DESC);
          oprot.writeString(struct.jsonInput);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class callApi_argsTupleSchemeFactory implements SchemeFactory {
      public callApi_argsTupleScheme getScheme() {
        return new callApi_argsTupleScheme();
      }
    }

    private static class callApi_argsTupleScheme extends TupleScheme<callApi_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, callApi_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthKey()) {
          optionals.set(0);
        }
        if (struct.isSetModuleName()) {
          optionals.set(1);
        }
        if (struct.isSetApiName()) {
          optionals.set(2);
        }
        if (struct.isSetJsonInput()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuthKey()) {
          oprot.writeString(struct.authKey);
        }
        if (struct.isSetModuleName()) {
          oprot.writeString(struct.moduleName);
        }
        if (struct.isSetApiName()) {
          oprot.writeString(struct.apiName);
        }
        if (struct.isSetJsonInput()) {
          oprot.writeString(struct.jsonInput);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, callApi_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.authKey = iprot.readString();
          struct.setAuthKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.moduleName = iprot.readString();
          struct.setModuleNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.apiName = iprot.readString();
          struct.setApiNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.jsonInput = iprot.readString();
          struct.setJsonInputIsSet(true);
        }
      }
    }

  }

  public static class callApi_result implements org.apache.thrift.TBase<callApi_result, callApi_result._Fields>, java.io.Serializable, Cloneable, Comparable<callApi_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("callApi_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new callApi_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new callApi_resultTupleSchemeFactory());
    }

    public TApiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TApiResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(callApi_result.class, metaDataMap);
    }

    public callApi_result() {
    }

    public callApi_result(
      TApiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public callApi_result(callApi_result other) {
      if (other.isSetSuccess()) {
        this.success = new TApiResult(other.success);
      }
    }

    public callApi_result deepCopy() {
      return new callApi_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TApiResult getSuccess() {
      return this.success;
    }

    public callApi_result setSuccess(TApiResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TApiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof callApi_result)
        return this.equals((callApi_result)that);
      return false;
    }

    public boolean equals(callApi_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(callApi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("callApi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class callApi_resultStandardSchemeFactory implements SchemeFactory {
      public callApi_resultStandardScheme getScheme() {
        return new callApi_resultStandardScheme();
      }
    }

    private static class callApi_resultStandardScheme extends StandardScheme<callApi_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, callApi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TApiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, callApi_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class callApi_resultTupleSchemeFactory implements SchemeFactory {
      public callApi_resultTupleScheme getScheme() {
        return new callApi_resultTupleScheme();
      }
    }

    private static class callApi_resultTupleScheme extends TupleScheme<callApi_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, callApi_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, callApi_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TApiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
